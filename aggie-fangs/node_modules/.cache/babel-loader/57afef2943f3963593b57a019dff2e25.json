{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isObject = exports.pick = exports.assertNever = void 0;\n/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */\n\nfunction assertNever(value) {\n  throw new Error(`Unexpected value should never occur: ${value}`);\n}\n\nexports.assertNever = assertNever;\n\nfunction pick(base, keys) {\n  const entries = keys.map(key => [key, base === null || base === void 0 ? void 0 : base[key]]);\n  return Object.fromEntries(entries);\n}\n\nexports.pick = pick;\n\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null;\n}\n\nexports.isObject = isObject;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;AAOA,SAAgBA,WAAhB,CAA4BC,KAA5B,EAAwC;AACtC,QAAM,IAAIC,KAAJ,CAAU,wCAAwCD,KAAK,EAAvD,CAAN;AACD;;AAFDE;;AAMA,SAAgBC,IAAhB,CACEC,IADF,EAEEC,IAFF,EAEoB;AAElB,QAAMC,OAAO,GAAGD,IAAI,CAACE,GAAL,CAASC,GAAG,IAAI,CAACA,GAAD,EAAMJ,IAAI,SAAJ,QAAI,WAAJ,GAAI,MAAJ,OAAI,CAAGI,GAAH,CAAV,CAAhB,CAAhB;AACA,SAAOC,MAAM,CAACC,WAAP,CAAmBJ,OAAnB,CAAP;AACD;;AANDJ;;AAQA,SAAgBS,QAAhB,CAAyBC,CAAzB,EAAmC;AACjC,SAAO,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,KAAK,IAAtC;AACD;;AAFDV","names":["assertNever","value","Error","exports","pick","base","keys","entries","map","key","Object","fromEntries","isObject","o"],"sources":["C:\\Programming\\github\\Proj3\\aggie-fangs\\node_modules\\@notionhq\\client\\src\\helpers.ts"],"sourcesContent":["/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */\nexport function assertNever(value: never): never {\n  throw new Error(`Unexpected value should never occur: ${value}`)\n}\n\ntype AllKeys<T> = T extends unknown ? keyof T : never\n\nexport function pick<O extends unknown, K extends AllKeys<O>>(\n  base: O,\n  keys: readonly K[]\n): Pick<O, K> {\n  const entries = keys.map(key => [key, base?.[key]])\n  return Object.fromEntries(entries)\n}\n\nexport function isObject(o: unknown): o is Record<PropertyKey, unknown> {\n  return typeof o === \"object\" && o !== null\n}\n"]},"metadata":{},"sourceType":"script"}