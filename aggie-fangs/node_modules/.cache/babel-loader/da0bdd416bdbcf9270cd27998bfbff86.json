{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programming\\\\github\\\\Proj3\\\\aggie-fangs\\\\src\\\\pages\\\\codingProb.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from \"styled-components\";\nimport loadingGif from \"../images/loading.gif\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProbButton = styled.button`\n  cursor: pointer;\n  background-color: rgb(75, 0, 130);\n  width: 100%;\n  padding: 15px 15px;\n  color: white;\n  text-align: center;\n  font-size: 20px;\n  font-family: \"Lucida Console\", \"Courier New\", monospace;\n  align-self: left;\n  left: 0;\n  margin-top: 10px;\n  margin-bottom: 0;\n`;\n_c = ProbButton;\nvar dbAddress = localStorage.getItem(\"db-address\");\n\nfunction CodingProblemList() {\n  _s();\n\n  const [codeProbArr, setcodeProbArr] = useState(null);\n  useEffect(() => {\n    fetch(dbAddress + '/getCodeProb', {\n      method: \"GET\"\n    }).then(response => {\n      if (response.type === 'opaque' || response.ok) {\n        response.json().then(codeProbsObjs => {\n          setcodeProbArr(codeProbsObjs);\n        });\n      }\n    }).catch(error => {\n      console.log(\"Error is: \", error);\n    });\n  }, []);\n\n  function changeCurrentProblem(objID) {\n    /* -------------- Get problem info by id here -------------- */\n    var probTitle = \"None Selected\";\n    var probConcepts = objID;\n    var probPrompt = objID;\n    var probCompany = localStorage.getItem(\"this-company\");\n    var codeProb = null;\n\n    if (codeProbArr != null) {\n      codeProbArr.map(codeObj => {\n        codeProb = codeObj.id === objID ? codeObj : codeProb;\n      });\n    }\n\n    if (codeProb) {\n      probTitle = codeProb.title;\n      probConcepts = codeProb.concepts;\n      probPrompt = codeProb.prompt;\n      probCompany = codeProb.company;\n    }\n\n    localStorage.setItem(\"problem-title\", probTitle);\n    localStorage.setItem(\"problem-concepts\", probConcepts);\n    localStorage.setItem(\"problem-prompt\", probPrompt);\n    localStorage.setItem(\"problem-company\", probCompany);\n    window.location.reload();\n  }\n\n  var problemList = new Array();\n  var thisCompany = localStorage.getItem(\"this-company\"); // id, title, prompt, concepts, company\n\n  if (codeProbArr != null) {\n    codeProbArr.map(codeObj => {\n      problemList.push(!thisCompany.localeCompare(codeObj.company) || thisCompany == \"None\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ProbButton, {\n          onClick: () => {\n            changeCurrentProblem(codeObj.id);\n          },\n          children: [codeObj.title, \" (\", codeObj.company, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 8\n      }, this) : null);\n    });\n  } else {\n    problemList.push( /*#__PURE__*/_jsxDEV(\"img\", {\n      src: loadingGif,\n      alt: \"wait until the page loads\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 22\n    }, this));\n  } // check if problemList is full of null values\n\n\n  var isEmpty = true;\n\n  for (let i = 0; i < problemList.length; i++) {\n    if (problemList[i] != null) {\n      isEmpty = false;\n      break;\n    }\n  }\n\n  if (isEmpty) {\n    problemList.push( /*#__PURE__*/_jsxDEV(\"body\", {\n      children: \"There are currently no problems related to this company.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"show-problems\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Problems:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), problemList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CodingProblemList, \"s6ToEh3SIS7YH3lNHeMLhYsfqAI=\");\n\n_c2 = CodingProblemList;\nexport default CodingProblemList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ProbButton\");\n$RefreshReg$(_c2, \"CodingProblemList\");","map":{"version":3,"sources":["C:/Programming/github/Proj3/aggie-fangs/src/pages/codingProb.js"],"names":["React","useEffect","useState","styled","loadingGif","ProbButton","button","dbAddress","localStorage","getItem","CodingProblemList","codeProbArr","setcodeProbArr","fetch","method","then","response","type","ok","json","codeProbsObjs","catch","error","console","log","changeCurrentProblem","objID","probTitle","probConcepts","probPrompt","probCompany","codeProb","map","codeObj","id","title","concepts","prompt","company","setItem","window","location","reload","problemList","Array","thisCompany","push","localeCompare","isEmpty","i","length"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from \"styled-components\";\r\nimport loadingGif from \"../images/loading.gif\";\r\n\r\nconst ProbButton = styled.button `\r\n  cursor: pointer;\r\n  background-color: rgb(75, 0, 130);\r\n  width: 100%;\r\n  padding: 15px 15px;\r\n  color: white;\r\n  text-align: center;\r\n  font-size: 20px;\r\n  font-family: \"Lucida Console\", \"Courier New\", monospace;\r\n  align-self: left;\r\n  left: 0;\r\n  margin-top: 10px;\r\n  margin-bottom: 0;\r\n`\r\n\r\nvar dbAddress = localStorage.getItem(\"db-address\");\r\n\r\nfunction CodingProblemList () {\r\n  const [codeProbArr, setcodeProbArr] = useState(null);\r\n  useEffect(() => {\r\n    fetch(dbAddress + '/getCodeProb',{\r\n    method: \"GET\"\r\n  }).then(response => {\r\n    if (response.type === 'opaque' || response.ok) {\r\n        response.json().then(codeProbsObjs => {\r\n          setcodeProbArr(codeProbsObjs)\r\n      });\r\n    } \r\n  }).catch(error => {\r\n    console.log(\"Error is: \", error)\r\n  });\r\n  },[]);\r\n\r\n  function changeCurrentProblem (objID) {\r\n\r\n    /* -------------- Get problem info by id here -------------- */\r\n\r\n    var probTitle = \"None Selected\";\r\n    var probConcepts = objID;\r\n    var probPrompt = objID;\r\n    var probCompany = localStorage.getItem(\"this-company\");\r\n    var codeProb = null;\r\n    if (codeProbArr != null) {\r\n      codeProbArr.map(codeObj => {\r\n        codeProb = (codeObj.id === objID) ?\r\n          codeObj :\r\n          codeProb\r\n      })\r\n    }\r\n    if (codeProb) {\r\n      probTitle = codeProb.title;\r\n      probConcepts = codeProb.concepts;\r\n      probPrompt = codeProb.prompt;\r\n      probCompany = codeProb.company;\r\n    }\r\n\r\n\r\n    localStorage.setItem(\"problem-title\", probTitle);\r\n    localStorage.setItem(\"problem-concepts\", probConcepts);\r\n    localStorage.setItem(\"problem-prompt\", probPrompt);\r\n    localStorage.setItem(\"problem-company\", probCompany);\r\n    window.location.reload();\r\n  }\r\n\r\n  var problemList = new Array();\r\n  var thisCompany = localStorage.getItem(\"this-company\");\r\n  // id, title, prompt, concepts, company\r\n  if(codeProbArr != null){\r\n    codeProbArr.map(codeObj => {\r\n      problemList.push((!thisCompany.localeCompare(codeObj.company) || thisCompany == \"None\") ?\r\n      (<div>\r\n        <ProbButton onClick={() => {changeCurrentProblem(codeObj.id)}}>{codeObj.title} ({codeObj.company})</ProbButton>\r\n      </div>)\r\n      : null)\r\n    })\r\n  } else {\r\n    problemList.push(<img src={loadingGif} alt=\"wait until the page loads\"/>)\r\n  }\r\n  \r\n  // check if problemList is full of null values\r\n  var isEmpty = true;\r\n  for (let i = 0; i < problemList.length; i++) {\r\n    if (problemList[i] != null) {\r\n      isEmpty = false;\r\n      break;\r\n    }\r\n  }\r\n  if (isEmpty) {\r\n    problemList.push(<body>There are currently no problems related to this company.</body>)\r\n  }\r\n  return (\r\n    <div className='show-problems'>\r\n      <h1>Problems:</h1>\r\n      {problemList}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CodingProblemList"]},"metadata":{},"sourceType":"module"}